{
  
    
        "post0": {
            "title": "Roster Cutter from JavaScript",
            "content": "WHO DO I CUT? Player Here .",
            "url": "https://vardaansinha.github.io/FastPages/java/2022/09/25/js.html",
            "relUrl": "/java/2022/09/25/js.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Psychology and the Good Life Notes",
            "content": "Important Vocabulary Terms: . Healthy: Staying “healthy” means to indulge ourselves in physical and mental cleansing activities, allowing us to stay happier and more content with our lives. . | Wealthy: Being “wealthy” does not only apply to money; it can also apply to time, where we get more time to complete things that we intend to. . | Gratitude: This is an emotion that allows us to express our gratefulness for a particular situation, person, emotion, etc. . | Enterprise: The individual journey that each person goes on regarding our well-being level and unique endeavors that we embark upon. . | Important Takeaways: . It is extremely important to express gratitude towards people and situations that we are in. We are all privileged in some way or the other, and it is crucial that we recognize that and be thankful for it. . We have to make a conscious effort to increase our wellbeing. Whether this is through exercising daily, meditating, or manifesting our goals, we have to prioritize our mental and physical health. . Personal Gratitude: . Personally, I am very grateful for the following things in my life: . Having a family that I can talk to and share experiences with | Having a home that I can return to everyday | Having access to a proper education everyday | Being friends with many great people | Having an abundant amount of food and clean water | . Group Stress Survey: . Our Scrum Board group (David, Akshat, Samit, and myself) created and analyzed a survey amongst many of our peers regarding their different contributing stress factors. . The survey results were documented by Samit in this post on his site. . The results showed that having a healthy social circle and life allows for a greater reduction of stress. From this survey, it is clear that ALL students should attempt to meet and socialize with good groups of people in order to take breaks from the rigor of daily schoolwork. .",
            "url": "https://vardaansinha.github.io/FastPages/markdown/csp/2022/09/19/psychology.html",
            "relUrl": "/markdown/csp/2022/09/19/psychology.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Collaboration in Computer Science",
            "content": "Notes on Jason Han’s Collaboration Videos: . Video #1: . Effective collaboration allows for the proper reflection of a diversity of talents amongst groups of people | Collaboration also allows for a view into the differing perspectives of each person that contributed to a certain design/idea | Some interpersonal skills that can be developed through collaboration include communication, consensus building, conflict resolution, and negotiations | . Video #2: . Pair Programming: Two programmers working together as a pair; one is actually writing code, the other is reviewing the work done by the other person (watching!) | Think-Pair-Share: Students are thinking through a problem alone, pairing with a partner to share ideas, and sharing the results with their peers | It is important to leave comments in the code! Always acknowledge other people’s code snippets (don’t steal). | It is important to get different perspectives when working on a design or program. | . Reflection Questions: . I believe that my Scrum Team is not strictly based on the basis of current friends and common interests. . Everyone in the group (Samit, Akshat, David, and myself) are all passionate about computer science, and are dedicated to working on our projects and going above and beyond the requirements for each week. . Our group is setup with diversity in our backgrounds and perspectives, but there is no diversity in our gender (we are all men). . Our group is best equipped for the skill sets needed for success in the classroom, as we are familiar with computer science and are always looking forward to new learning each week. . .",
            "url": "https://vardaansinha.github.io/FastPages/markdown/csp/2022/09/19/collaboration.html",
            "relUrl": "/markdown/csp/2022/09/19/collaboration.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "My Introduction to Scrum Board",
            "content": "This week, I explored the ScrumBoard platform. It is an extremely useful way to write down issues and tasks that need to be worked on, and it is easy to collaborate on it; you can add up to 10 other people on your ScrumBoard for FREE. . For this week, I added three total issues that I need to work on. . My ScrumBoard Issues! . .",
            "url": "https://vardaansinha.github.io/FastPages/markdown/csp/2022/09/11/scrum-board-setup.html",
            "relUrl": "/markdown/csp/2022/09/11/scrum-board-setup.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Performance Task Planning for AP CSP",
            "content": "Performance Task Scoring Rubric: . I decided to take a look at some of the 2021 CollegeBoard scoring guidelines/rubric, and these are the components that I read about: . Program Purpose and Function: | The program has inputs, outputs, and a generally efficient functionality. Points will NOT be given if the program is not shown to be running, or if the purpose described in the written response is just the functionality of the program. These are supposed to be two DIFFERENT things. . Data Abstraction: | The written response has to have two separate code segments; one that shows data being stored in a list, and another that shows data in the same list being used to accomplish the purpose of the program. . Managing Complexity: | The written response has to contain a list in the program that helps to manage the complexity (the lazy programmer way). This has to be EXPLAINED. . Procedural Abstraction: | Again, there must be two program code segments; one with a student-developed procedure on a parameter affecting program functionality, and another where that procedure is being called. . Algorithm Interpretation: | There must be a program code segment with a developed algorithm. This would have to contain sequencing, selection, and iterations. . For my Performance Task Creation with my partner, we are going to brainstorm throughout the week and come up with a plan to merge both of our AppLab ideas, and previous ideas from the Python Quiz from two weeks ago. . Bria’s Post Review: . After reading her post with all of the components that helped her to get a 5, I noted down a few interesting components that I will definitely implement into my studying plan &amp; performance task creation outline: . Khan Academy Videos, which are quick and straight to the point. . | Timing and paying attention on the practice tests, as they are very similar to what will be seen on the actual test. . | Review the past scoring examples from CollegeBoard. This will help to guide my performance task and see how to get the maximum points on my project. . | Cite all sources! This can be done through comments. The original creator MUST be given credit if certain snippets of code are not yours. . |",
            "url": "https://vardaansinha.github.io/FastPages/markdown/csp/2022/09/11/performance-task-planning.html",
            "relUrl": "/markdown/csp/2022/09/11/performance-task-planning.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "AppLab Creation",
            "content": "Mental Health Quiz AppLab Creation . Snippets: . . . . Interesting Components: . I used the Area51 Theme throughout all of my screens and buttons. This is one of the themes that AppLab provided, and I really liked its color scheme. . | The button to restart the quiz at the end is a good component for people who want to take the quiz multiple times. . | Successes: . The app itself was fully functional; all of the buttons and screens worked as they were meant to. . | My use of onEvent and showScreen was smooth and easy to make the app. . | Failures: . I was not able to use a more EFFICIENT way to make my program, rather than just using onEvent and showScreen components repeatedly for EVERY option and screen. . | The quiz itself may have been a little bit on the shorter side; maybe there could’ve been more interactive components for the user to get more help. Giving links and resources for the user to visit at the end of the quiz could be a good idea. . |",
            "url": "https://vardaansinha.github.io/FastPages/markdown/csp/2022/09/11/applab-creation.html",
            "relUrl": "/markdown/csp/2022/09/11/applab-creation.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "AppLab Brainstorm/Plan",
            "content": "Starting Ideas for the Subject of my Quiz: . Sports Quiz | Programming Language Quiz | Mental Health Evaluation Quiz | After lots of consideration, I chose to go with the Mental Health Evaluation Quiz, due to its great pertinence to today’s society. . OUTLINE/PLAN: . Create all of the screens: screens for each question and each output screen for the selected option. | Create all of the interactive buttons for each option. | Utilize onEvent &amp; setScreen to create the functionality of the quiz. | Create an option in the ending to return to the home screen and restart the quiz. | GOALS: . I want to be able to use a function in order to limit the amount of hard work (rather than smart work) that I have to do to create the quiz, rather than using nested onEvent and setScreen elements. | I want to be able to create a very short, yet effective quiz that is able to give useful advice to the quiz taker regarding their mental health lifestyle and habits. |",
            "url": "https://vardaansinha.github.io/FastPages/markdown/csp/2022/09/10/applab-planning.html",
            "relUrl": "/markdown/csp/2022/09/10/applab-planning.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Time Allocations for each Period",
            "content": "Bell Schedule . Monday, Tuesday, Thursday: . Period Start Time End Time . Period 1 | 8:35 AM | 9:44 AM | . Period 2 | 9:49 AM | 10:58 AM | . Break | 10:58 AM | 11:08 AM | . Period 3 | 11:13 AM | 12:22 AM | . Lunch | 12:22 PM | 12:52 PM | . Period 4 | 12:57 PM | 2:06 PM | . Office Hours | 2:06 PM | 2:31 PM | . Period 5 | 2:36 PM | 3:45 PM | . Wednesday (Late Start): . Period Start Time End Time . Period 1 | 9:55 AM | 10:53 AM | . Period 2 | 10:58 AM | 11:56 AM | . Break | 11:56 AM | 12:06 PM | . Period 3 | 12:11 PM | 1:09 PM | . Lunch | 1:09 PM | 1:39 PM | . Period 4 | 1:44 PM | 2:42 PM | . Period 5 | 2:47 PM | 3:45 PM | . Friday: . Period Start Time End Time . Period 1 | 8:35 AM | 9:49 AM | . Period 2 | 9:54 AM | 11:08 AM | . Break | 11:08 AM | 11:18 AM | . Period 3 | 11:23 AM | 12:37 PM | . Lunch | 12:37 PM | 1:07 PM | . Period 4 | 1:12 PM | 2:26 PM | . Period 5 | 2:31 PM | 3:45 PM | .",
            "url": "https://vardaansinha.github.io/FastPages/markdown/school/2022/09/05/time-box.html",
            "relUrl": "/markdown/school/2022/09/05/time-box.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Lists, Dictionaries, Iterations",
            "content": "Types of Integers/Strings/Variables: . In this demonstration, we are going to look at a few types of strings and variables: . String: There are many different types of Python strings. There are two types of Python strings: single-line and multi-line. Strings can be assigned to variables. | Data Types: Float: This is data for numerical values that may have a floating decimal point and need to be printed. | Integer: These are whole numbers that can be defined and printed. In the below demonstration, you will see many integers being assigned to variables, such as my age and APEL grade. | List: Lists of multiple data values. | Dictionary: An assortment of key-value pairs that are stored in a dictionary. | Strings: (explained above) | | . import random # type string name = &quot;Vardaan Sinha&quot; print(&quot;Name:&quot;, name, type(name)) # type integer age = 15 print(&quot;Age:&quot;, age, type(age)) # float variable apelgrade = 75 print(&quot;APEL Grade:&quot;, apelgrade, type(apelgrade)) # type list classes = [&quot;AP Physics&quot;, &quot;AP Stats&quot;, &quot;AP CSP&quot;, &quot;APEL&quot;, &quot;US History&quot;] print(&quot;Classes:&quot;, classes, type(classes)) print(&quot;Period 3 Class:&quot;, classes[2], type(classes[2])) # reversed list langs = [&quot;C&quot;, &quot;Python&quot;, &quot;Java&quot;, &quot;HTML&quot;, &quot;JavaScript&quot;] langs.reverse() print(&#39; nReversed Langs:&#39;), print(&#39;, &#39;.join(langs)) # randomized order with random module random.shuffle(classes) print(&#39; nRandom Class Order:&#39;), print(&#39;, &#39;.join(classes)) . Name: Vardaan Sinha &lt;class &#39;str&#39;&gt; Age: 15 &lt;class &#39;int&#39;&gt; APEL Grade: 75 &lt;class &#39;int&#39;&gt; Classes: [&#39;AP Physics&#39;, &#39;AP Stats&#39;, &#39;AP CSP&#39;, &#39;APEL&#39;, &#39;US History&#39;] &lt;class &#39;list&#39;&gt; Period 3 Class: AP CSP &lt;class &#39;str&#39;&gt; Reversed Langs: JavaScript, HTML, Java, Python, C Random Class Order: AP CSP, APEL, US History, AP Physics, AP Stats . InfoDb Demonstration: . InfoDb is a way to gather dictionary values into a single database. In the following demonstration, you will see that Samit and I have gathered each other&#39;s personal information, such as first name, last name, email, and many other components, and stored them as dictionary values using InfoDb. . Using the .append() method can be used to add multiple inputs. . InfoDb = [] # first dictionary value InfoDb.append({ &quot;FirstName&quot;: &quot;Samit&quot;, &quot;LastName&quot;: &quot;Poojary&quot;, &quot;DOB&quot;: &quot;February 24th, 2006&quot;, &quot;Email&quot;: &quot;samitpoojary@gmail.com&quot;, &quot;Height&quot;: &quot;5&#39;7&quot;, &quot;Hobbies&quot;: [&quot;Playing Soccer&quot;, &quot;Fantasy Football&quot;, &quot;Programming&quot;] }) # adding second dictionary value InfoDb.append({ &quot;FirstName&quot;: &quot;Akshat&quot;, &quot;LastName&quot;: &quot;Parikh&quot;, &quot;DOB&quot;: &quot;December 28th, 2005&quot;, &quot;Email&quot;: &quot;akshat1228@gmail.com&quot;, &quot;Height&quot;: &quot;6&#39;&quot;, &quot;Hobbies&quot;: [&quot;Playing Basketball&quot;, &quot;Trading&quot;, &quot;Programming&quot;] }) # This prints the dictionary keys and corresponding values. print(InfoDb) . [{&#39;FirstName&#39;: &#39;Samit&#39;, &#39;LastName&#39;: &#39;Poojary&#39;, &#39;DOB&#39;: &#39;February 24th, 2006&#39;, &#39;Email&#39;: &#39;samitpoojary@gmail.com&#39;, &#39;Height&#39;: &#34;5&#39;7&#34;, &#39;Hobbies&#39;: [&#39;Playing Soccer&#39;, &#39;Fantasy Football&#39;, &#39;Programming&#39;]}, {&#39;FirstName&#39;: &#39;Akshat&#39;, &#39;LastName&#39;: &#39;Parikh&#39;, &#39;DOB&#39;: &#39;December 28th, 2005&#39;, &#39;Email&#39;: &#39;akshat1228@gmail.com&#39;, &#39;Height&#39;: &#34;6&#39;&#34;, &#39;Hobbies&#39;: [&#39;Playing Basketball&#39;, &#39;Trading&#39;, &#39;Programming&#39;]}] . Printing InfoDb Data: . Using the print function, the data for the dictionary keys and values are formatted in a particular way to avoid clutter. . def print_data(homie): print(&quot;Name:&quot;, homie[&quot;FirstName&quot;], homie[&quot;LastName&quot;]) print(&quot;Birthday:&quot;, homie[&quot;DOB&quot;]) print(&quot;Email:&quot;, homie[&quot;Email&quot;]) print(&quot;Height:&quot;, homie[&quot;Height&quot;]) print(&quot;Hobbies:&quot;, homie[&quot;Hobbies&quot;]) print() # This prints the data for the SECOND dictionary value, as Python always starts from 0 instead of 1. print_data(InfoDb[1]) . Name: Akshat Parikh Birthday: December 28th, 2005 Email: akshat1228@gmail.com Height: 6&#39; Hobbies: [&#39;Playing Basketball&#39;, &#39;Trading&#39;, &#39;Programming&#39;] . Loops: . As per the name, loops are used to execute statement(s) more than once. . For loops are loops for an iterable object, or an object that can be looped over such as a list, dictionary, or string. These loops can perform the exact same action for each iterable object. . def for_loop(): for homie in InfoDb: print_data(homie) # Prints the data from InfoDb based on the index falling in the specified range. def indexed_for_loop(): print(&quot;For Loop n&quot;) for i in range(len(InfoDb)): print_data(InfoDb[i]) for_loop() indexed_for_loop() . Name: Samit Poojary Birthday: February 24th, 2006 Email: samitpoojary@gmail.com Height: 5&#39;7 Hobbies: [&#39;Playing Soccer&#39;, &#39;Fantasy Football&#39;, &#39;Programming&#39;] Name: Akshat Parikh Birthday: December 28th, 2005 Email: akshat1228@gmail.com Height: 6&#39; Hobbies: [&#39;Playing Basketball&#39;, &#39;Trading&#39;, &#39;Programming&#39;] For Loop Name: Samit Poojary Birthday: February 24th, 2006 Email: samitpoojary@gmail.com Height: 5&#39;7 Hobbies: [&#39;Playing Soccer&#39;, &#39;Fantasy Football&#39;, &#39;Programming&#39;] Name: Akshat Parikh Birthday: December 28th, 2005 Email: akshat1228@gmail.com Height: 6&#39; Hobbies: [&#39;Playing Basketball&#39;, &#39;Trading&#39;, &#39;Programming&#39;] . While Loops: . These are loops that repeat a particular statement when a specified condition is met (true). . def while_loops(): # This sets the initial value for the index at 0. i = 0 # When i &lt; dictionary length, the data from InfoDb will be printed. while i &lt; len(InfoDb): print_data(InfoDb[i]) i = i + 1 # Printing the while loop&#39;s output print(&quot;While Loop n&quot;) while_loops() . While Loop Name: Samit Poojary Birthday: February 24th, 2006 Email: samitpoojary@gmail.com Height: 5&#39;7 Hobbies: [&#39;Playing Soccer&#39;, &#39;Fantasy Football&#39;, &#39;Programming&#39;] Name: Akshat Parikh Birthday: December 28th, 2005 Email: akshat1228@gmail.com Height: 6&#39; Hobbies: [&#39;Playing Basketball&#39;, &#39;Trading&#39;, &#39;Programming&#39;] . Recursive Loops: . These are loops where a function can call itself. It keeps doing so until a particular condition is no longer met. A prime example of this is shown in the below code. . def recursive(i): if i &gt;= len(InfoDb): return print_data(InfoDb[i]) return recursive(i + 1) # Printing the 2nd dictionary term. recursive(1) . Name: Akshat Parikh Birthday: December 28th, 2005 Email: akshat1228@gmail.com Height: 6&#39; Hobbies: [&#39;Playing Basketball&#39;, &#39;Trading&#39;, &#39;Programming&#39;] . Dictionary Quiz: . import getpass # Setting INTEGER variables: setting the correct answers to START at 0. questions = 3 correct = 0 print(&quot;This is a Python-centric quiz that will allow you to test your knowledge of the AP CSP content thus far.&quot;) # Setting &#39;q&#39; and &#39;a&#39; parameters def question_answer(q, a): # prints q print(&quot;Question: &quot; + q) # This is the user&#39;s input/response to the question. resp = input() print(&quot;Answer: &quot; + resp) # The correct +=1 adds a correct answer. if a == resp.lower(): print(&quot;Correct!&quot;) global correct correct +=1 else: print(&quot;Incorrect!&quot;) return resp q1 = question_answer(&quot;Which type of loop is used to call repeatedly?&quot;, &quot;recursive&quot;) q2 = question_answer(&quot;A Python ___ stores associated keys and values.&quot;, &quot;dictionary&quot;) q3 = question_answer(&quot;What type of variable can contain numbers with &#39;floating&#39; decimal values?&quot;, &quot;float&quot;) # If statement based on the amount of questions that user gets correct if correct &lt; 3: print(f&#39;You got only {correct}/3 correct.&#39;) # getpass module called to get username to tell the user their score and percentage. print (getpass.getuser() + &quot; that&#39;s a &quot; + str((correct / questions)* 100)+ &quot;%&quot;) print(&quot;The answers in order were &#39;recursive&#39;, &#39;dictionary&#39;, and &#39;float&#39; for next time.&quot;) else: print(f&#39;Great job! You got a 100%.&#39;) # DICTIONARY COMPONENT # This allows for the user&#39;s answers to be recorded and given back to them after they complete the quiz. PyQuiz = { &quot;Q1&quot;: q1, &quot;Q2&quot;: q2, &quot;Q3&quot;: q3 } print(&quot;Your recorded answers for review:&quot;, PyQuiz) . This is a Python-centric quiz that will allow you to test your knowledge of the AP CSP content thus far. Question: Which type of loop is used to call repeatedly? Answer: while Incorrect! Question: A Python ___ stores associated keys and values. Answer: dictionary Correct! Question: What type of variable can contain numbers with &#39;floating&#39; decimal values? Answer: float Correct! You got only 2/3 correct. vardaan that&#39;s a 66.66666666666666% The answers in order were &#39;recursive&#39;, &#39;dictionary&#39;, and &#39;float&#39; for next time. Your recorded answers for review: {&#39;Q1&#39;: &#39;while&#39;, &#39;Q2&#39;: &#39;dictionary&#39;, &#39;Q3&#39;: &#39;float&#39;} .",
            "url": "https://vardaansinha.github.io/FastPages/jupyter/python/2022/09/05/listsdictionaries.html",
            "relUrl": "/jupyter/python/2022/09/05/listsdictionaries.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Future FastPages Plans",
            "content": "There are quite a few things that I hope to do on my FastPages site in the upcoming week: . Fix the liquid portion of my table. | Fix and update the custom color-switch CSS that you added to your site to make the site more visually appealing. | Update the custom cursor, make it function properly. | .",
            "url": "https://vardaansinha.github.io/FastPages/markdown/school/2022/09/05/compsci-todo.html",
            "relUrl": "/markdown/school/2022/09/05/compsci-todo.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Changing the Default Remote Theme for FastPages",
            "content": "I wanted to change the default minima theme to something else, just to see the visual effect it would have on my site. . In this first image, I changed the remote_theme section of the config.yml file to the Cayman theme, which I found online. . Then, after the changes were synced, we had the following results: . As you can see, there were both positives and flaws with the design. On the positives, the color scheme is very nice, and the title font for my site looks much more appealing. . On the other hand, this theme is not adjusted with corresponding CSS, and it breaks certain components of my FastPages site. For example, my pages (tags, about me, notes, search) all disappeared, taking away from the functionality of the site. .",
            "url": "https://vardaansinha.github.io/FastPages/markdown/html/2022/09/05/changing-remote-theme.html",
            "relUrl": "/markdown/html/2022/09/05/changing-remote-theme.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Vardaan's School Work for This Week",
            "content": ". . My Upcoming School Work: . This week, I have a lot of work to do. I am in APEL, AP Stats, AP Physics, and AP Computer Science. I have a lot of homework from all of these classes. . APEL: . Finish Annotating Sample 3 | Review feedback on writing assignments | Prepare for Tuesday’s MC Test | Prepare for Wednesday’s On Demand | . AP Stats: . Complete daily worksheets | Review for Team Challenge FRQ on Monday, 8/29 | Review for Unit 1 Quiz on Thursday, 9/1 | . AP Physics: . Finish Minicar Lab | Keep reviewing 1D Motion concepts | Prepare for a possible quiz | . AP Computer Science: . Work on the things listed in the schedule for this week with Samit and crossover pair, Akshat/David | Do the Hacks, go above and beyond! | .",
            "url": "https://vardaansinha.github.io/FastPages/markdown/school/2022/08/28/work-post.html",
            "relUrl": "/markdown/school/2022/08/28/work-post.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Python Quiz",
            "content": "import getpass,sys # The import command is used to import particular Python modules that involve certain sets of functions and variables that may be useful in a specific script. def question_answer(prompt): print(&quot;Question: &quot;) message = input(&quot;Question: &quot; + prompt) print(&quot;Answer:&quot; +message) def response(prompt): print(&quot;Question: &quot; + prompt) message = input(&quot;Question: &quot; + prompt) return message integer = 3 # Here, what I did was that I defined the value of the integer. This needed to be done for the Bonus question. question_data = [ &quot;What type of statement is used to evaluate an expression list?&quot;, &quot;What type of statement is used to return an expression list?&quot;, &quot;What type of statement is used to call other Python modules to utilize their functions?&quot;, &quot;BONUS: What is the name of the Python module used to utilize StackOverflow without leaving the terminal?&quot; ] answer_data = [ &quot;expression&quot;, &quot;return&quot;, &quot;import&quot;, &quot;howdoi&quot;, ] questions = len(question_data) correct = 0 print(&#39;Hey skippy, &#39; + str(questions) + &quot; questions.&quot;) resp = response(&quot;Prepared? Say &#39;yes&#39; or &#39;no&#39;.&quot;) if resp == &quot;yes&quot;: print(&quot;Let&#39;s start.&quot;) for i in range(len(question_data)): resp = response(question_data[i]) if resp == answer_data[i]: print(resp + &quot; is correct.&quot;) correct +=1 else: print(resp + &quot; is wrong.&quot;) print (getpass.getuser() + &quot; you got a &quot; + str(correct) + &quot;/&quot; + str(integer) + &quot; or a &quot; + str((correct / integer) * 100) + &quot;%&quot;) else: print(&quot;Leave.&quot;) . Hey skippy, 4 questions. Question: Prepared? Say &#39;yes&#39; or &#39;no&#39;. Let&#39;s start. Question: What type of statement is used to evaluate an expression list? expression is correct. Question: What type of statement is used to return an expression list? return is correct. Question: What type of statement is used to call other Python modules to utilize their functions? import is correct. Question: BONUS: What is the name of the Python module used to utilize StackOverflow without leaving the terminal? howdoi is correct. vardaan you got a 4/3 or a 133.33333333333331% . Now, I&#39;d like to talk about a caveat that I used in the code. As you can all see, I defined &#39;integer&#39; as 3 at the start, even though there were 4 questions. This is because the 4th question was defined as a bonus question, and if someone got the bonus question right, they should get more than a 100%. . First, I tried without defining the integer value in the code and just adding the number 3 in the last print statement, but that did not work, as Python cannot concatenate an integer into a string value. Therefore, I had to define the integer as a string, and that made the print statement work without crashing at the end. . Thanks! .",
            "url": "https://vardaansinha.github.io/FastPages/jupyter/python/2022/08/28/pythonquiz.html",
            "relUrl": "/jupyter/python/2022/08/28/pythonquiz.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Scenic Collage",
            "content": ". This is a picture that I took from my flight from San Diego to Baltimore, when I went for CyberPatriot Nationals. . . This is a conventional picture that I took when I went to my Indian home country, and visited the Taj Mahal: one of the seven wonders of the world. . . This is another edited picture that I took at a photography class when I went to Design 39 in middle school. .",
            "url": "https://vardaansinha.github.io/FastPages/markdown/personal/2022/08/28/pictures.html",
            "relUrl": "/markdown/personal/2022/08/28/pictures.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Bash Notebook Experimentation",
            "content": "cd ~ find . -name Anaconda3-2022 * # The above command utilized the &#39;find&#39; feature of Bash in order to look for a file in the directory that we moved into with the phrase &#39;Anaconda3&#39;. conda --help # If you are confused about how to verify if you have the proper tools using conda, you can look at the command syntax with the above help command. conda list # This command is used to verify the tools that we have installed. . ./Anaconda3-2022.05-Linux-x86_64.sh.1 ./Anaconda3-2022.05-Linux-x86_64.sh.2 ./Anaconda3-2022.05-Linux-x86_64.sh.3 ./Anaconda3-2022.05-Linux-x86_64.sh usage: conda [-h] [-V] command ... conda is a tool for managing and deploying applications, environments and packages. Options: positional arguments: command clean Remove unused packages and caches. compare Compare packages between conda environments. config Modify configuration values in .condarc. This is modeled after the git config command. Writes to the user .condarc file (/home/vardaan/.condarc) by default. create Create a new conda environment from a list of specified packages. info Display information about current conda install. init Initialize conda for shell interaction. [Experimental] install Installs a list of packages into a specified conda environment. list List linked packages in a conda environment. package Low-level conda package utility. (EXPERIMENTAL) remove Remove a list of packages from a specified conda environment. uninstall Alias for conda remove. run Run an executable in a conda environment. search Search for packages and display associated information. The input is a MatchSpec, a query language for conda packages. See examples below. update Updates conda packages to the latest compatible version. upgrade Alias for conda update. optional arguments: -h, --help Show this help message and exit. -V, --version Show the conda version number and exit. conda commands available from other packages: build content-trust convert debug develop env index inspect metapackage pack render repo server skeleton token verify # packages in environment at /home/vardaan/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . echo &quot;Let&#39;s check if you have correctly formatted the names for your posts.&quot; cd ~ cd ./vscode/FastPages/_posts ls -l | grep 2022 # The ls -l command lists all files in a long list format. Grep is a feature used to filter files based on certain parts of the names of the file. It can also be used to find certain phrases, words, or characters INSIDE of a file. echo &quot;If all of your posts are showing up in the output, this means that you have properly formatted your post names with the year in the beginning.&quot; . Let&#39;s check if you have correctly formatted the names for your posts. -rw-r--r-- 1 vardaan vardaan 498 Aug 19 19:35 2022-08-19-minor-markdown-post.md -rw-r--r-- 1 vardaan vardaan 759 Aug 28 17:20 2022-08-22-work-post.md -rw-r--r-- 1 vardaan vardaan 760 Aug 28 17:43 2022-08-28-pictures.md If all of your posts are showing up in the output, this means that you have properly formatted your post names with the year in the beginning. . echo &quot;Let&#39;s show you how to use Bash to give you the contents of a specific file.&quot; cd ~ cd ./vscode/FastPages echo &quot;Let&#39;s show the contents of my index.html file.&quot; echo &quot;&quot; cat index.html echo &quot;&quot; echo &quot;Bottom of index.html file.&quot; . Let&#39;s show you how to use Bash to give you the contents of a specific file. Let&#39;s show the contents of my index.html file. layout: home search_exclude: true image: images/logo.png Welcome to Vardaan&#39;s FastPages site! To learn more about me, go to the About Me page, and feel free to check out some of my posts below! ![]({{site.baseurl}}/images/mac-jones.png &#34;https://github.com/fastai/fastpages&#34;) This is Mac Jones, my favorite football player on my favorite football team: The New England Patriots. # Posts Bottom of index.html file. . jupyter --version | grep 8.4.0 python --version | grep 3.9.12 bash --version | grep 5.0.17 # Each command above is grepping for the updated version of each of the key tools that we must have installed: jupyter notebooks, python, and bash. The grep command is grepping for the latest version. # If there is no output for any of the tools, please update your software. . IPython : 8.4.0 Python 3.9.12 GNU bash, version 5.0.17(1)-release (x86_64-pc-linux-gnu) . As shown above, the &quot;conda list&quot; command can be used to verify all the installed tools. . As shown in the above shell, the --version parameter along with the grep feature can be used to confirm that each kernel is updated to the latest version. . To automate a procedure from installation or update a repository, the following commands can be used: . git stage changes (staging changes to any files in your repository) | git commit (committing the staged changes) | git push or sync changes (this syncs the changes to your repository and updates your GitHub Pages site.) |",
            "url": "https://vardaansinha.github.io/FastPages/jupyter/bash/2022/08/28/bash.html",
            "relUrl": "/jupyter/bash/2022/08/28/bash.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Sadness",
            "content": ". . My table members and I have just received startling news; the APEL AP Exam and the AP Physics AP Exam are on the same day. . Why would College Board do such a thing? . Here’s why: . They enjoy making kids suffer. | They make learning about grades instead of actual learning. | They don’t care about the mental health of high schoolers. | . This is saddening news. .",
            "url": "https://vardaansinha.github.io/FastPages/markdown/personal/2022/08/28/ap-exam-depression.html",
            "relUrl": "/markdown/personal/2022/08/28/ap-exam-depression.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Physics Lab Report",
            "content": "Vardaan Sinha . Mr. Liao . AP Physics . 18 August 2022 . Lab #1: Measurements &amp; Graphical Analysis . Purpose Statement: The purpose of the lab is to find the relationship between the mass and radius of the disks and to calculate the uncertainty of the measured values through graphical analysis methods, such as linearization, where the graph shows a directly proportional relationship between the independent and dependent variables. . Derived Equation: . p = m/v → m = vp . | V = ah . | m = ( pi r^{2})hp . This equation shows that the mass of the disk is equal to the surface area of the disk (in other words, the area of a circle) multiplied by the height of the disk by the density of the disk. . | | Experiment Outline: . Measure the mass of the disk using the balance. Before using the balance, it must be zeroed, and then the disk can be placed on the balance. . | Measure the radius of the disk using the meter stick. The radius is measured by placing one end of the meter stick in the center of the circle, and the other end on the outside edge of the circle. . | Repeat Steps 1 &amp; 2 for each disk. . | Measure the thickness of one of the disks by folding the disk and measuring the height. Since the disk is folded to make it easier to find the height, divide the measurement appropriately to find the height if the disk was not folded. . | Graph the proportional mass vs radius2 relationship and determine the equation for the best-fit line. . | Precision: . The meter stick’s precision our group used was 1 millimeter (0.1 centimeters), since the meter stick used to measure the radius of the disks had markings down to the tenth of a centimeter. The measured radii of the disks in the data table is noted to the nearest hundredth of a centimeter, because of the 2/5/8 rounding rule, which added an extra digit of precision to the measurement. . | Data Table: . Radius2 (cm2) vs. Mass (grams) &amp; Radius (cm) . Radius (centimeters) Mass (grams)   Radius2 (centimeters2) . 5.32 cm | 0.37 g |   | 28.3024 cm2 | . 6.92 cm | 0.71 g |   | 47.8864 cm2 | . 4.12 cm | 0.25 g |   | 16.9744 cm2 | . 3.08 cm | 0.13 g |   | 9.4864 cm2 | . 2.28 cm | 0.08 g |   | 5.1984 cm2 | . . This is a nonlinear regression. . Equation: y = 0.0199151x2 - 0.0499334x + 0.095349 . . This is a linear regression. . Line of Best Fit Equation: y = 0.0146174x - 0.00729059 . Analysis Questions: . From the line of best fit, the independent variable represents the radius2 (centimeters2). This is because there is a linear relationship between the measured mass of each disk in grams and the corresponding squared radius values (in centimeters2) for each disk. . | The slope of the line of best fit has units of grams/cm2. In the original equation given in the lab, mass is equal to density multiplied by the disk’s surface area multiplied by the height of the disk. The surface area of the disk can be calculated through the formula for the area of the circle, or pi multiplied by the radius squared. Since the density, pi, and height values are all constant, they make up the coefficient for the slope of the line of best fit equation. Density is measured in grams/centimeter3, pi is a numerical constant, and height is measured in centimeters, and multiplying these values together gives units of grams/centimeter2. To verify that these are the correct units, the remaining part of the original equation is radius2, which has units of centimeters2, and multiplying the slope units (grams/centimeter2) by centimeters2 would produce a value in grams, which is the unit of measurement for m (mass). Since the y-value of the line of best fit equation has units of grams, the y-intercept (-0.00729059) must also be with units of grams, in order to produce the same unit on both sides of the equation: . In this case, g represents grams, and cm represents centimeters. . y = mx + b . | g = (g/cm2 * cm2) + g . | g = g + g . | g = g (verification) . | | | Yes, in ideal conditions, the “b” in the y = mx + b formula should be zero, as a disk with a radius of 0 centimeters would have a mass of 0 grams. . | Best-Fit Line Slope: 0.0146174 . The “thickness” of the cylinders is approximately 0.00125 centimeters. . | Density * ( pi) * Height = Slope . | Density * ( pi) * 0.00125 cm = 0.0146174 . | Density * 0.003925 cm = 0.0146174 . | Density = 3.72417834 ( approx) 3.72 g/cm3 . | The actual density of aluminum is 2.7 g/cm3. . | Percent Error: (3.72 g/cm3 - 2.7 g/cm3)/(2.7 g/cm3) x 100% = 37.778% ( approx) 38% . | | Our calculated density for the aluminum foil disk (3.72 g/cm3) was slightly larger than the actual calculated density of aluminum (2.7 g/cm3), as shown by our positive 38% error. Our number was likely larger than the actual value because of the inability to accurately measure the height of each disk, leading to an under measurement, creating a higher density value than expected. Furthermore, the measurement of the disk area may have been slightly inaccurate due to each disk not being perfectly circular. . | Synthesis Questions: . Disks with a greater thickness would correspond to an increase in the slope of the best-fit line. A greater thickness with an unchanged radius would result in a greater volume of the disk, leading to an increase in the slope of the line. The experimental density would stay the same, since the increased thickness would be reflected in the increased slope of the line. The slope is equal to the density multiplied by pi (constant) by the thickness of the disk, and with the increased thickness already accounted for in the increased slope, the density would remain the same as before. Disks with a greater thickness would have allowed for a more accurate measurement of the height, creating a more accurate density measurement. . | In this modified graph, the purple line (also circled) represents a scenario in which steel disks with the same thickness were used in the experiment. The slope for the line representing the steel disks is steeper than the line for the aluminum foil disks, since the density of steel (7.85 g/cm3) is much greater than that of aluminum (2.7 g/cm3), and the slope is directly proportional to the density. The purple line in the above graph has a slope of approximately 2.9 times greater than the best fit line showing the relationship between mass and radius2, as the density of steel is 2.9 times greater than that of aluminum. . | Work: . Slope: 122 kg/m2 . | Thickness: 0.5 cm . | Density * ( pi) * Thickness = Slope . | Density * ( pi) * 0.5 cm = 122 kg/m2 . | Density * 1.57 cm = 122 kg/m2 . | 122 kg/m2 x (1.0 m2/10,000 cm2) x (1000 g/1.0 kg) = 12.2 g/cm2 . | Density * 1.57 cm = 12.2 g/cm2 . | Density = 7.77 g/cm3 . | This is closest to the density of iron, which is 7.8 g/cm3. Therefore, the unknown material that these disks are made of is iron. . | | Multiple Choice Questions: . Mass = Density * Volume . Density * Area * Height = Mass . | Density * ( pi)r2 * Height = Mass . | C = 2( pi)r . | C2 = 2( pi)r2 . | C2/(2( pi)) = r2 . | Density * ( pi)(C2/(2( pi))2) * Height = Mass . | Mass = (Density * Height * 1/4( pi)) * C2 . | Slope = (Density * Height)/(4( pi)) . | Therefore, E is the correct option. . | | SKIP . | Volume of a Sphere = 4/3( pi)r3 (r = radius) . Mass = Density * Volume . | Mass = Density * 4/3( pi)r3 . | Mass = (Density * 4/3( pi)) x r3 . | Since density and 4/3( pi) are constants, the mass would need to be plotted versus the radius3, so the correct option is C. . | |",
            "url": "https://vardaansinha.github.io/FastPages/2022/08/28/Physics-Lab-Report.html",
            "relUrl": "/2022/08/28/Physics-Lab-Report.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Jupyter Notebook Experimentation",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Python Skills . I am very excited to learn python, and I would like to show Python&#39;s print capability: . I, Vardaan Sinha, am putting my Python skills to the test. .",
            "url": "https://vardaansinha.github.io/FastPages/jupyter/2022/08/19/vardaan.html",
            "relUrl": "/jupyter/2022/08/19/vardaan.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Vardaan's Computer Science Goals",
            "content": ". . My Goals for CSP This Year: . Hello! My name is Vardaan, and I have many goals for CSP this year. I hope to gain a better understanding of Python, and I also hope to get more used to using VSCode for all my projects. . I am extremely excited for this class, as I love to work with my team and I love to work with technology. .",
            "url": "https://vardaansinha.github.io/FastPages/markdown/2022/08/19/minor-markdown-post.html",
            "relUrl": "/markdown/2022/08/19/minor-markdown-post.html",
            "date": " • Aug 19, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "About Me",
          "content": "Hi! I’m Vardaan Sinha, and I’m a high school junior who loves math, computer science, cyber-security, writing, and solving 21st century problems. .",
          "url": "https://vardaansinha.github.io/FastPages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Computer Science Notes",
          "content": "Key Terms: . GitHub-Related Terms: . Repository: The location (for us, on Github) where we modify our fastpages site and collect all of our work for a particular project. . | Clone: “Cloning” a repository means to copy a repository onto your local system for modification. . | Commit: This means to save and commit changes in order for the changes to update on your site. . | VSCode Terms: . Source Control: This is the tab in VSCode where you stage, commit, and sync changes. . | Debug Console: This is where you can debug and work around any issues in your VSCode files. . | Application of these Terms: . Cloning a Repository through WSL: . (base) vardaan@LAPTOP-6CPSDHS5:~$ cd ./vscode # Changing the directory to your VSCode directory, which contains all of your cloned repositories. (base) vardaan@LAPTOP-6CPSDHS5:~/vscode$ git clone &quot;https://github.com/SamitPoojary/FASTPAGES.git&quot; # Cloning my partner Samit&#39;s FastPages so that I can track his changes. Cloning into &#39;FASTPAGES&#39;... remote: Enumerating objects: 722, done. remote: Counting objects: 100% (613/613), done. remote: Compressing objects: 100% (329/329), done. remote: Total 722 (delta 260), reused 479 (delta 191), pack-reused 109 Receiving objects: 100% (722/722), 9.46 MiB | 1.33 MiB/s, done. Resolving deltas: 100% (260/260), done. . Checking Status &amp; Making Commits through WSL: . (base) vardaan@LAPTOP-6CPSDHS5:~/vscode$ dir APCSP FASTPAGES FastPages fastpages # Showing the files that are in the &#39;vscode&#39; directory. (base) vardaan@LAPTOP-6CPSDHS5:~/vscode$ cd ./FastPages (base) vardaan@LAPTOP-6CPSDHS5:~/vscode/FastPages$ git status On branch master Your branch is up to date with &#39;origin/master&#39;. Changes not staged for commit: (use &quot;git add &lt;file&gt;...&quot; to update what will be committed) (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory) modified: .vscode/settings.json modified: _pages/01_about.md modified: _pages/02_notes.md no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;) # This command shows the status of the repository (any modified files or changes that have not been committed). (base) vardaan@LAPTOP-6CPSDHS5:~/vscode/FastPages$ git commit -a [master 746b938] committing large changes for bash committing large changes for bash 3 files changed, 21 insertions(+), 9 deletions(-) # This commits all the changes, and you can use VSCode to sync the changes. .",
          "url": "https://vardaansinha.github.io/FastPages/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  

  

  

  
  

  

  
  

  
  

  
  

  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://vardaansinha.github.io/FastPages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}